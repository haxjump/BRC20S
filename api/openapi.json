{
  "openapi": "3.0.3",
  "info": {
    "title": "ord",
    "description": "â—‰ Ordinal wallet and block explorer",
    "license": {
      "name": "CC0-1.0"
    },
    "version": "0.8.2"
  },
  "paths": {
    "/api/v1/brc20/address/{address}/balance": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get all ticker balances of the address.",
        "description": "Get all ticker balances of the address.\n\nRetrieve all BRC20 protocol asset balances associated with a address.",
        "operationId": "brc20_all_balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account balances by query address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20AllBalance"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/address/{address}/transferable": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get the balance of ticker of the address.",
        "description": "Get the balance of ticker of the address.\n\nRetrieve the balance of the ticker from the given address.",
        "operationId": "brc20_all_transferable",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account all transferable inscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20Transferable"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/block/{blockhash}/events": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get block events by blockhash.",
        "description": "Get block events by blockhash.\n\nRetrieve all BRC20 events associated with a block.",
        "operationId": "brc20_block_events",
        "parameters": [
          {
            "name": "blockhash",
            "in": "path",
            "description": "block hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain block events by block hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20BlockEvents"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/tick": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get all tickers info.",
        "description": "Get all tickers info.\n\nRetrieve detailed information about all tickers.",
        "operationId": "brc20_all_tick_info",
        "responses": {
          "200": {
            "description": "Obtain matching all BRC20 tickers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20AllTick"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/tick/{ticker}": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get the ticker info.",
        "description": "Get the ticker info.\n\nRetrieve detailed information about the ticker.",
        "operationId": "brc20_tick_info",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "description": "Token ticker",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain matching BRC20 ticker by query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20Tick"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "ticker must be 4 bytes length"
                }
              }
            }
          },
          "404": {
            "description": "Ticker not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "tick not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/tick/{ticker}/address/{address}/balance": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get the ticker balance of the address.",
        "description": "Get the ticker balance of the address.\n\nRetrieve the asset balance of the 'ticker' for the address.",
        "operationId": "brc20_balance",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "description": "Token ticker",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account balance by query ticker.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20Balance"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/tick/{ticker}/address/{address}/transferable": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get the transferable inscriptions of the address.",
        "description": "Get the transferable inscriptions of the address.\n\nRetrieve the transferable inscriptions with the ticker from the given address.",
        "operationId": "brc20_transferable",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "description": "Token ticker",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account transferable inscriptions of ticker.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20Transferable"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20/tx/{txid}/events": {
      "get": {
        "tags": [
          "brc20"
        ],
        "summary": "Get transaction events by txid.",
        "description": "Get transaction events by txid.\n\nRetrieve all BRC20 events associated with a transaction.",
        "operationId": "brc20_tx_events",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain transaction events by txid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20TxEvents"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/address/{address}/balance": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get all ticker balances of the address.",
        "description": "Get all ticker balances of the address.\n\nRetrieve all asset balances of the address.",
        "operationId": "brc20s_all_balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account balances by query address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SAllBalance"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/address/{address}/transferable": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Retrieve the balance from the given address.",
        "description": "Retrieve the balance from the given address.",
        "operationId": "brc20s_all_transferable",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account all transferable inscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20STransferable"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/block/{blockhash}/receipts": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the block receipts by blockhash.",
        "description": "Get the block receipts by blockhash.\n\nGet all receipts of the block.",
        "operationId": "brc20s_block_receipts",
        "parameters": [
          {
            "name": "blockhash",
            "in": "path",
            "description": "block hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain block receipts by block hash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SBlockReceipts"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/pool": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the all of pool infomations.",
        "description": "Get the all of pool infomations.",
        "operationId": "brc20s_all_pool_info",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start index of the result.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of the result.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain all of pool infomations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SAllPool"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/pool/{pid}": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the pool infomation by pid.",
        "description": "Get the pool infomation by pid.\n\nRetrieve information about the pledge pool.",
        "operationId": "brc20s_pool_info",
        "parameters": [
          {
            "name": "pid",
            "in": "path",
            "description": "Pool ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a01234567f#0f"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain pool infomation by pid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SPool"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/pool/{pid}/address/{address}/userinfo": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the user info of the pool.",
        "description": "Get the user info of the pool.",
        "operationId": "brc20s_userinfo",
        "parameters": [
          {
            "name": "pid",
            "in": "path",
            "description": "Pool ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a01234567f#0f"
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain the user info of the pool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SUserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/pool/{tid}": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the all of pool infomations by ticker ID.",
        "description": "Get the all of pool infomations by ticker ID.\n\nGet all pool information for the Ticker ID.",
        "operationId": "brc20s_all_pools_by_tid",
        "parameters": [
          {
            "name": "tid",
            "in": "path",
            "description": "Ticker ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a01234567f"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain pool infomation by ticker ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SAllPool"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/stake/{address}/{tick}": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the stake info of the ticker.",
        "description": "Get the stake info of the ticker.",
        "operationId": "brc20s_stake_info",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tick",
            "in": "path",
            "description": "The BRC20 ticker name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "ordi"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain stake info of the ticker",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SStakedInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/tick": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get all BRC20S tickers info.",
        "description": "Get all BRC20S tickers info.",
        "operationId": "brc20s_all_tick_info",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start index of the result.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of the result.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain matching all BRC20S tickers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SAllTick"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/tick/{tick_id}": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get information of a specified BRC20S protocol ticker.",
        "description": "Get information of a specified BRC20S protocol ticker.",
        "operationId": "brc20s_tick_info",
        "parameters": [
          {
            "name": "tick_id",
            "in": "path",
            "description": "The ticker ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a12345678f"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain matching BRC20S ticker by query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20STick"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/tick/{tick_id}/address/{address}/balance": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the ticker balance of the address.",
        "description": "Get the ticker balance of the address.\n\nThe balance is the sum of the transferable balance and the available balance.",
        "operationId": "brc20s_balance",
        "parameters": [
          {
            "name": "tick_id",
            "in": "path",
            "description": "Token ticker ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account balance by query ticker.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20SBalance"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/tick/{tick_id}/address/{address}/transferable": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Retrieve the transferable inscriptions with the specified ticker from the given address.",
        "description": "Retrieve the transferable inscriptions with the specified ticker from the given address.",
        "operationId": "brc20s_transferable",
        "parameters": [
          {
            "name": "tick_id",
            "in": "path",
            "description": "Ticker ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "a12345678f"
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain account transferable inscriptions of ticker ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20STransferable"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/brc20s/tx/{txid}/receipts": {
      "get": {
        "tags": [
          "brc20s"
        ],
        "summary": "Get the transaction receipts by txid.",
        "description": "Get the transaction receipts by txid.\n\nGet all receipts of the transaction.",
        "operationId": "brc20s_txid_receipts",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain transaction receipts by txid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BRC20STxReceipts"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/node/info": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Retrieve the indexer status.",
        "description": "Retrieve the indexer status.\n\nDisplay indexer synchronization information, including indexer version, blockchain network, indexer height, blockchain network height, and other information.",
        "operationId": "node_info",
        "parameters": [
          {
            "name": "btc",
            "in": "query",
            "description": "Optional to query the BTC chain status.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain node runtime status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ord/block/{blockhash}/inscriptions": {
      "get": {
        "tags": [
          "ord"
        ],
        "summary": "Retrieve the inscription actions from the given block.",
        "description": "Retrieve the inscription actions from the given block.",
        "operationId": "ord_block_inscriptions",
        "parameters": [
          {
            "name": "blockhash",
            "in": "path",
            "description": "block hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain inscription actions by blockhash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdBlockInscriptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ord/id/{id}/inscription": {
      "get": {
        "tags": [
          "ord"
        ],
        "summary": "Retrieve the inscription infomation with the specified inscription id.",
        "description": "Retrieve the inscription infomation with the specified inscription id.",
        "operationId": "ord_inscription_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "inscription ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain inscription infomation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdOrdInscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ord/number/{number}/inscription": {
      "get": {
        "tags": [
          "ord"
        ],
        "summary": "Retrieve the inscription infomation with the specified inscription number.",
        "description": "Retrieve the inscription infomation with the specified inscription number.",
        "operationId": "ord_inscription_number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "inscription number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain inscription infomation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdOrdInscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ord/outpoint/{outpoint}/info": {
      "get": {
        "tags": [
          "ord"
        ],
        "summary": "Retrieve the outpoint infomation with the specified outpoint.",
        "description": "Retrieve the outpoint infomation with the specified outpoint.",
        "operationId": "ord_outpoint",
        "parameters": [
          {
            "name": "outpoint",
            "in": "path",
            "description": "Outpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain outpoint infomation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdOutPointData"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ord/tx/{txid}/inscriptions": {
      "get": {
        "tags": [
          "ord"
        ],
        "summary": "Retrieve the inscription actions from the given transaction.",
        "description": "Retrieve the inscription actions from the given transaction.",
        "operationId": "ord_txid_inscriptions",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain inscription actions by txid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdTxInscriptions"
                }
              }
            }
          },
          "400": {
            "description": "Bad query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 2,
                  "msg": "bad request"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 3,
                  "msg": "not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 1,
                  "msg": "internal error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiError": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Internal"
            ],
            "properties": {
              "Internal": {
                "type": "string",
                "description": "Internal server error."
              }
            },
            "example": {
              "code": 1,
              "msg": "internal error"
            }
          },
          {
            "type": "object",
            "required": [
              "BadRequest"
            ],
            "properties": {
              "BadRequest": {
                "type": "string",
                "description": "Bad request."
              }
            },
            "example": {
              "code": 1,
              "msg": "bad request"
            }
          },
          {
            "type": "object",
            "required": [
              "NotFound"
            ],
            "properties": {
              "NotFound": {
                "type": "string",
                "description": "Resource not found."
              }
            },
            "example": {
              "code": 1,
              "msg": "not found"
            }
          }
        ]
      },
      "BRC20AllBalance": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.AllBalance"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20AllTick": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.AllTickInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20Balance": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.Balance"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20BlockEvents": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.BlockEvents"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SAllBalance": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.AllBalance"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SAllPool": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.AllPoolInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SAllTick": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.AllTickInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SBalance": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.Balance"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SBlockReceipts": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.BlockReceipts"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SPool": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.Pool"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SStakedInfo": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.StakedInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20STick": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.TickInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20STransferable": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.Transferable"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20STxReceipts": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.TxReceipts"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20SUserInfo": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20s.UserInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20Tick": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.TickInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20Transferable": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.TransferableInscriptions"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "BRC20TxEvents": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/brc20.TxEvents"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "ChainInfo": {
        "type": "object",
        "properties": {
          "chainHeight": {
            "type": "integer",
            "format": "uint64",
            "description": "The height of the blockchain.",
            "nullable": true,
            "minimum": 0
          },
          "network": {
            "type": "string",
            "description": "The network of the blockchain.",
            "nullable": true
          },
          "ordHeight": {
            "type": "integer",
            "format": "uint64",
            "description": "The height of our indexer.",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "Node": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/NodeInfo"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "NodeInfo": {
        "type": "object",
        "required": [
          "chainInfo"
        ],
        "properties": {
          "branch": {
            "type": "string",
            "description": "The name of the branch or tag of the API endpoint build.",
            "nullable": true
          },
          "buildTime": {
            "type": "string",
            "description": "Build time of the API endpoint.",
            "nullable": true
          },
          "chainInfo": {
            "$ref": "#/components/schemas/ChainInfo"
          },
          "commitHash": {
            "type": "string",
            "description": "Git commit hash of the API endpoint build.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Node version of the API endpoint build.",
            "nullable": true
          }
        }
      },
      "OrdBlockInscriptions": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/ord.BlockInscriptions"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "OrdOrdInscription": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/ord.OrdInscription"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "OrdOutPointData": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/ord.OutPointData"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "OrdTxInscriptions": {
        "type": "object",
        "required": [
          "code",
          "msg",
          "data"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/ord.TxInscriptions"
          },
          "msg": {
            "type": "string",
            "description": "ok",
            "example": "ok"
          }
        }
      },
      "ScriptPubkey": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string",
                "description": "Address."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "nonStandard"
            ],
            "properties": {
              "nonStandard": {
                "type": "string",
                "description": "Non-standard script hash."
              }
            }
          }
        ]
      },
      "brc20.AllBalance": {
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20.Balance"
            }
          }
        }
      },
      "brc20.AllTickInfo": {
        "type": "object",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20.TickInfo"
            }
          }
        }
      },
      "brc20.Balance": {
        "type": "object",
        "required": [
          "tick",
          "availableBalance",
          "transferableBalance",
          "overallBalance"
        ],
        "properties": {
          "availableBalance": {
            "type": "string",
            "format": "uint64",
            "description": "Available balance."
          },
          "overallBalance": {
            "type": "string",
            "format": "uint64",
            "description": "Overall balance."
          },
          "tick": {
            "type": "string",
            "description": "Name of the ticker."
          },
          "transferableBalance": {
            "type": "string",
            "format": "uint64",
            "description": "Transferable balance."
          }
        }
      },
      "brc20.BlockEvents": {
        "type": "object",
        "required": [
          "block"
        ],
        "properties": {
          "block": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20.TxEvents"
            }
          }
        }
      },
      "brc20.DeployEvent": {
        "type": "object",
        "required": [
          "type",
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "oldSatpoint",
          "newSatpoint",
          "supply",
          "limitPerMint",
          "decimal",
          "from",
          "to",
          "valid",
          "msg"
        ],
        "properties": {
          "decimal": {
            "type": "integer",
            "format": "int32",
            "description": "The decimal of the deployed ticker.",
            "minimum": 0
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "limitPerMint": {
            "type": "string",
            "description": "The limit per mint of the deployed ticker."
          },
          "msg": {
            "type": "string",
            "description": "Message generated during execution."
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output."
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input."
          },
          "supply": {
            "type": "string",
            "description": "The total supply of the deployed ticker."
          },
          "tick": {
            "type": "string",
            "description": "The ticker deployed."
          },
          "to": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "type": {
            "type": "string",
            "description": "Event type."
          },
          "valid": {
            "type": "boolean",
            "description": "Executed state."
          }
        }
      },
      "brc20.ErrorEvent": {
        "type": "object",
        "required": [
          "type",
          "inscriptionId",
          "inscriptionNumber",
          "oldSatpoint",
          "newSatpoint",
          "from",
          "to",
          "valid",
          "msg"
        ],
        "properties": {
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "msg": {
            "type": "string",
            "description": "Error message."
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output."
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input."
          },
          "to": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "type": {
            "type": "string",
            "description": "Event type."
          },
          "valid": {
            "type": "boolean",
            "description": "Executed state."
          }
        }
      },
      "brc20.InscribeTransferEvent": {
        "type": "object",
        "required": [
          "type",
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "oldSatpoint",
          "newSatpoint",
          "amount",
          "from",
          "to",
          "valid",
          "msg"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of pretransfer."
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "msg": {
            "type": "string",
            "description": "Message generated during execution."
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output."
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input."
          },
          "tick": {
            "type": "string",
            "description": "The ticker of pretransfer."
          },
          "to": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "type": {
            "type": "string",
            "description": "Event type."
          },
          "valid": {
            "type": "boolean",
            "description": "Executed state."
          }
        }
      },
      "brc20.MintEvent": {
        "type": "object",
        "required": [
          "type",
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "oldSatpoint",
          "newSatpoint",
          "amount",
          "from",
          "to",
          "valid",
          "msg"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount minted."
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "msg": {
            "type": "string",
            "description": "Message generated during execution."
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output."
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input."
          },
          "tick": {
            "type": "string",
            "description": "The ticker minted."
          },
          "to": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "type": {
            "type": "string",
            "description": "Event type."
          },
          "valid": {
            "type": "boolean",
            "description": "Executed state."
          }
        }
      },
      "brc20.TickInfo": {
        "type": "object",
        "description": "Description of a BRC20 ticker.",
        "required": [
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "supply",
          "limitPerMint",
          "minted",
          "decimal",
          "deployBy",
          "txid",
          "deployHeight",
          "deployBlocktime"
        ],
        "properties": {
          "decimal": {
            "type": "integer",
            "format": "uint8",
            "description": "The decimal of the ticker.<br>\nNumber of decimals cannot exceed 18 (default).",
            "default": 18,
            "example": 18,
            "maximum": 18,
            "minimum": 0
          },
          "deployBlocktime": {
            "type": "integer",
            "format": "uint32",
            "description": "The timestamp of the block that the ticker deployed.",
            "minimum": 0
          },
          "deployBy": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "deployHeight": {
            "type": "integer",
            "format": "uint64",
            "description": "The height of the block that the ticker deployed.",
            "minimum": 0
          },
          "inscriptionId": {
            "type": "string",
            "description": "Inscription ID of the ticker deployed."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "Inscription number of the ticker deployed."
          },
          "limitPerMint": {
            "type": "string",
            "format": "uint64",
            "description": "The maximum amount of each mining."
          },
          "minted": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the ticker that has been minted."
          },
          "supply": {
            "type": "string",
            "format": "uint64",
            "description": "The total supply of the ticker.<br>\nMaximum supply cannot exceed uint64_max.\n\nA string containing a 64-bit unsigned integer.<br>\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively."
          },
          "tick": {
            "type": "string",
            "description": "Name of the ticker."
          },
          "txid": {
            "type": "string",
            "description": "A hex encoded 32 byte transaction ID that the ticker deployed.\n\nThis is represented in a string as adding a prefix 0x to a 64 character hex string."
          }
        }
      },
      "brc20.TransferEvent": {
        "type": "object",
        "required": [
          "type",
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "oldSatpoint",
          "newSatpoint",
          "amount",
          "from",
          "to",
          "valid",
          "msg"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of transfer."
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "msg": {
            "type": "string",
            "description": "Message generated during execution."
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output."
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input."
          },
          "tick": {
            "type": "string",
            "description": "The ticker of transfer."
          },
          "to": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "type": {
            "type": "string",
            "description": "Event type."
          },
          "valid": {
            "type": "boolean",
            "description": "Executed state."
          }
        }
      },
      "brc20.TransferableInscription": {
        "type": "object",
        "required": [
          "inscriptionId",
          "inscriptionNumber",
          "amount",
          "tick",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the ticker that will be transferred."
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "owner": {
            "type": "string",
            "description": "The address to which the transfer will be made."
          },
          "tick": {
            "type": "string",
            "description": "The ticker name that will be transferred."
          }
        }
      },
      "brc20.TransferableInscriptions": {
        "type": "object",
        "required": [
          "inscriptions"
        ],
        "properties": {
          "inscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20.TransferableInscription"
            }
          }
        }
      },
      "brc20.TxEvent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/brc20.DeployEvent"
          },
          {
            "$ref": "#/components/schemas/brc20.MintEvent"
          },
          {
            "$ref": "#/components/schemas/brc20.InscribeTransferEvent"
          },
          {
            "$ref": "#/components/schemas/brc20.TransferEvent"
          },
          {
            "$ref": "#/components/schemas/brc20.ErrorEvent"
          }
        ]
      },
      "brc20.TxEvents": {
        "type": "object",
        "required": [
          "events",
          "txid"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20.TxEvent"
            }
          },
          "txid": {
            "type": "string"
          }
        }
      },
      "brc20s.AllBalance": {
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.Balance"
            }
          }
        }
      },
      "brc20s.AllPoolInfo": {
        "type": "object",
        "required": [
          "pools",
          "total"
        ],
        "properties": {
          "pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.Pool"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "brc20s.AllTickInfo": {
        "type": "object",
        "required": [
          "tokens",
          "total"
        ],
        "properties": {
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.TickInfo"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "brc20s.Balance": {
        "type": "object",
        "required": [
          "tick",
          "transferable",
          "overall"
        ],
        "properties": {
          "overall": {
            "type": "string",
            "format": "uint64",
            "description": "Overall balance."
          },
          "tick": {
            "$ref": "#/components/schemas/brc20s.Tick"
          },
          "transferable": {
            "type": "string",
            "format": "uint64",
            "description": "Transferable balance."
          }
        }
      },
      "brc20s.BlockReceipts": {
        "type": "object",
        "required": [
          "block"
        ],
        "properties": {
          "block": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.TxReceipts"
            }
          }
        }
      },
      "brc20s.DeployPoolEvent": {
        "type": "object",
        "required": [
          "pid",
          "stake",
          "earn",
          "pool",
          "erate",
          "only",
          "dmax",
          "deployer"
        ],
        "properties": {
          "deployer": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "dmax": {
            "type": "string",
            "format": "uint64",
            "description": "The max amount of the pool."
          },
          "earn": {
            "$ref": "#/components/schemas/brc20s.Earn"
          },
          "erate": {
            "type": "string",
            "description": "Mining rate."
          },
          "only": {
            "type": "integer",
            "format": "int32",
            "description": "Whether the pool is exclusive.",
            "minimum": 0
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          },
          "pool": {
            "type": "string",
            "description": "Pool type. Such as \"pool\", \"fixed\"."
          },
          "stake": {
            "$ref": "#/components/schemas/brc20s.Stake"
          }
        }
      },
      "brc20s.DeployTickEvent": {
        "type": "object",
        "required": [
          "tick",
          "supply",
          "decimal",
          "deployer"
        ],
        "properties": {
          "decimal": {
            "type": "integer",
            "format": "int32",
            "description": "The decimal of the ticker.",
            "minimum": 0
          },
          "deployer": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "supply": {
            "type": "string",
            "format": "uint64",
            "description": "The total supply of the ticker."
          },
          "tick": {
            "$ref": "#/components/schemas/brc20s.Tick"
          }
        }
      },
      "brc20s.DepositEvent": {
        "type": "object",
        "required": [
          "pid",
          "amount",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the deposit."
          },
          "owner": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          }
        }
      },
      "brc20s.Earn": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the ticker."
          },
          "name": {
            "type": "string",
            "description": "Name of the ticker."
          }
        }
      },
      "brc20s.Event": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.DeployTickEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "deployTick"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.DeployPoolEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "deployPool"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.DepositEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "deposit"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.WithdrawEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "withdraw"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.PassiveWithdrawEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "passiveWithdraw"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.MintEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "mint"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.InscribeTransferEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "inscribeTransfer"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/brc20s.TransferEvent"
              },
              {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "transfer"
                    ]
                  }
                }
              }
            ]
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "brc20s.InscribeTransferEvent": {
        "type": "object",
        "required": [
          "tick",
          "amount",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of the transfer."
          },
          "owner": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "tick": {
            "$ref": "#/components/schemas/brc20s.Tick"
          }
        }
      },
      "brc20s.MintEvent": {
        "type": "object",
        "required": [
          "pid",
          "amount",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the mint."
          },
          "owner": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          }
        }
      },
      "brc20s.OperationType": {
        "type": "string",
        "enum": [
          "deploy",
          "mint",
          "deposit",
          "withdraw",
          "passiveWithdraw",
          "inscribeTransfer",
          "transfer"
        ]
      },
      "brc20s.PassiveWithdrawEvent": {
        "type": "object",
        "required": [
          "pid",
          "amount",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the passive withdraw."
          },
          "owner": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          }
        }
      },
      "brc20s.Pool": {
        "type": "object",
        "required": [
          "pid",
          "stake",
          "earn",
          "pool",
          "erate",
          "staked",
          "minted",
          "dmax",
          "only",
          "accRewardPerShare",
          "latestUpdateBlock",
          "inscriptionId",
          "inscriptionNumber",
          "deployer",
          "deployHeight",
          "deployBlocktime",
          "txid"
        ],
        "properties": {
          "accRewardPerShare": {
            "type": "string",
            "description": "The accumulated reward per share."
          },
          "deployBlocktime": {
            "type": "integer",
            "format": "uint32",
            "description": "The timestamp of the block that the ticker deployed.",
            "minimum": 0
          },
          "deployHeight": {
            "type": "integer",
            "format": "uint64",
            "description": "The height of the block that the ticker deployed.",
            "minimum": 0
          },
          "deployer": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "dmax": {
            "type": "string",
            "description": "The total supply of the ticker."
          },
          "earn": {
            "$ref": "#/components/schemas/brc20s.Earn"
          },
          "erate": {
            "type": "string",
            "description": "Mining rate."
          },
          "inscriptionId": {
            "type": "string",
            "description": "Inscription ID of the ticker deployed."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "Inscription number of the ticker deployed."
          },
          "latestUpdateBlock": {
            "type": "integer",
            "format": "uint64",
            "description": "The latest update block number.",
            "minimum": 0
          },
          "minted": {
            "type": "string",
            "description": "The amount of the ticker that has been minted."
          },
          "only": {
            "type": "integer",
            "format": "int32",
            "description": "Whether the pool is exclusive.",
            "minimum": 0
          },
          "pid": {
            "type": "string",
            "description": "Pool id."
          },
          "pool": {
            "type": "string",
            "description": "Pool type. Such as \"pool\", \"fixed\"."
          },
          "stake": {
            "$ref": "#/components/schemas/brc20s.Stake"
          },
          "staked": {
            "type": "string",
            "description": "The amount of the ticker that has been staked."
          },
          "txid": {
            "type": "string",
            "description": "A hex encoded 32 byte transaction ID that the ticker deployed."
          }
        }
      },
      "brc20s.Receipt": {
        "type": "object",
        "required": [
          "op",
          "from",
          "valid",
          "msg",
          "events"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.Event"
            },
            "description": "The events of the receipt.\n"
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id.",
            "nullable": true
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "THe inscription number.",
            "nullable": true
          },
          "msg": {
            "type": "string",
            "description": "The message of the receipt."
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output.",
            "nullable": true
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input.",
            "nullable": true
          },
          "op": {
            "$ref": "#/components/schemas/brc20s.OperationType"
          },
          "to": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScriptPubkey"
              }
            ],
            "nullable": true
          },
          "valid": {
            "type": "boolean",
            "description": "Whether the receipt is valid."
          }
        }
      },
      "brc20s.Stake": {
        "type": "object",
        "required": [
          "type",
          "tick"
        ],
        "properties": {
          "tick": {
            "type": "string",
            "description": "Name of the ticker."
          },
          "type": {
            "type": "string",
            "description": "Type of the ticker. such as \"brc20\"."
          }
        }
      },
      "brc20s.StakedInfo": {
        "type": "object",
        "required": [
          "type",
          "tick",
          "max_share",
          "total_only",
          "staked_pids"
        ],
        "properties": {
          "max_share": {
            "type": "string",
            "format": "uint64",
            "description": "The total amount of shared pool tokens."
          },
          "staked_pids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.StakedPid"
            },
            "description": "The list of staked pids."
          },
          "tick": {
            "type": "string",
            "description": "The ticker info."
          },
          "total_only": {
            "type": "string",
            "format": "uint64",
            "description": "The total amount of exclusive pool tokens."
          },
          "type": {
            "type": "string",
            "description": "The pledge type."
          }
        }
      },
      "brc20s.StakedPid": {
        "type": "object",
        "required": [
          "pid",
          "only",
          "stake"
        ],
        "properties": {
          "only": {
            "type": "boolean",
            "description": "Whether the pool is exclusive."
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          },
          "stake": {
            "type": "string",
            "description": "The amount of staked tokens."
          }
        }
      },
      "brc20s.Tick": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the ticker."
          },
          "name": {
            "type": "string",
            "description": "Name of the ticker."
          }
        }
      },
      "brc20s.TickInfo": {
        "type": "object",
        "required": [
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "minted",
          "supply",
          "decimal",
          "deployer",
          "txid",
          "deployHeight",
          "deployBlocktime"
        ],
        "properties": {
          "decimal": {
            "type": "integer",
            "format": "int32",
            "description": "The decimal.",
            "minimum": 0
          },
          "deployBlocktime": {
            "type": "integer",
            "format": "uint64",
            "description": "The timestamp of the block that the ticker deployed.",
            "minimum": 0
          },
          "deployHeight": {
            "type": "integer",
            "format": "uint64",
            "description": "The height of the block that the ticker deployed.",
            "minimum": 0
          },
          "deployer": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "minted": {
            "type": "string",
            "format": "uint64",
            "description": "The minted amount."
          },
          "supply": {
            "type": "string",
            "format": "uint64",
            "description": "The total supply."
          },
          "tick": {
            "$ref": "#/components/schemas/brc20s.Tick"
          },
          "txid": {
            "type": "string",
            "description": "The transaction id."
          }
        }
      },
      "brc20s.TransferEvent": {
        "type": "object",
        "required": [
          "tick",
          "amount",
          "from",
          "to"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the transfer."
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "msg": {
            "type": "string",
            "description": "The message of the transfer.",
            "nullable": true
          },
          "tick": {
            "$ref": "#/components/schemas/brc20s.Tick"
          },
          "to": {
            "$ref": "#/components/schemas/ScriptPubkey"
          }
        }
      },
      "brc20s.Transferable": {
        "type": "object",
        "required": [
          "inscriptions"
        ],
        "properties": {
          "inscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.TransferableInscription"
            }
          }
        }
      },
      "brc20s.TransferableInscription": {
        "type": "object",
        "required": [
          "tick",
          "inscriptionId",
          "inscriptionNumber",
          "amount",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount."
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "owner": {
            "type": "string",
            "description": "The owner."
          },
          "tick": {
            "$ref": "#/components/schemas/brc20s.Tick"
          }
        }
      },
      "brc20s.TxReceipts": {
        "type": "object",
        "required": [
          "receipts",
          "txid"
        ],
        "properties": {
          "receipts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/brc20s.Receipt"
            }
          },
          "txid": {
            "type": "string"
          }
        }
      },
      "brc20s.UserInfo": {
        "type": "object",
        "required": [
          "pid",
          "staked",
          "minted",
          "pendingReward",
          "rewardDebt",
          "latestUpdateBlock"
        ],
        "properties": {
          "latestUpdateBlock": {
            "type": "integer",
            "format": "uint64",
            "description": "The latest update block number.",
            "minimum": 0
          },
          "minted": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of minted tokens."
          },
          "pendingReward": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of pending reward tokens."
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          },
          "rewardDebt": {
            "type": "string",
            "description": "The amount of reward debt."
          },
          "staked": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of staked tokens."
          }
        }
      },
      "brc20s.WithdrawEvent": {
        "type": "object",
        "required": [
          "pid",
          "amount",
          "owner"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "format": "uint64",
            "description": "The amount of the withdraw."
          },
          "owner": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "pid": {
            "type": "string",
            "description": "The pool id."
          }
        }
      },
      "ord.BlockInscriptions": {
        "type": "object",
        "required": [
          "block"
        ],
        "properties": {
          "block": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ord.TxInscriptions"
            }
          }
        }
      },
      "ord.InscriptionAction": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "new"
            ],
            "properties": {
              "new": {
                "type": "object",
                "description": "New inscription",
                "required": [
                  "cursed",
                  "unbound"
                ],
                "properties": {
                  "cursed": {
                    "type": "boolean"
                  },
                  "unbound": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "description": "Transfer inscription",
            "enum": [
              "transfer"
            ]
          }
        ]
      },
      "ord.InscriptionDigest": {
        "type": "object",
        "required": [
          "id",
          "number",
          "location"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The inscription id."
          },
          "location": {
            "type": "string",
            "description": "The inscription location."
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          }
        }
      },
      "ord.OrdInscription": {
        "type": "object",
        "required": [
          "id",
          "number",
          "genesisHeight",
          "location"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "The inscription content body.",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "The inscription content type.",
            "nullable": true
          },
          "genesisHeight": {
            "type": "integer",
            "format": "uint64",
            "description": "The inscription genesis block height.",
            "minimum": 0
          },
          "id": {
            "type": "string",
            "description": "The inscription id."
          },
          "location": {
            "type": "string",
            "description": "The inscription location."
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number."
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScriptPubkey"
              }
            ],
            "nullable": true
          },
          "sat": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription sat index.",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "ord.OutPointData": {
        "type": "object",
        "required": [
          "txid",
          "scriptPubKey",
          "owner",
          "value",
          "inscriptionDigest"
        ],
        "properties": {
          "inscriptionDigest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ord.InscriptionDigest"
            },
            "description": "The inscriptions on the transaction output."
          },
          "owner": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "scriptPubKey": {
            "type": "string",
            "description": "The script pubkey."
          },
          "txid": {
            "type": "string",
            "description": "The transaction id."
          },
          "value": {
            "type": "integer",
            "format": "uint64",
            "description": "The value of the transaction output.",
            "minimum": 0
          }
        }
      },
      "ord.TxInscription": {
        "type": "object",
        "required": [
          "action",
          "inscriptionId",
          "oldSatpoint",
          "from"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ord.InscriptionAction"
          },
          "from": {
            "$ref": "#/components/schemas/ScriptPubkey"
          },
          "inscriptionId": {
            "type": "string",
            "description": "The inscription id."
          },
          "inscriptionNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The inscription number.",
            "nullable": true
          },
          "newSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction output.",
            "nullable": true
          },
          "oldSatpoint": {
            "type": "string",
            "description": "The inscription satpoint of the transaction input."
          },
          "to": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScriptPubkey"
              }
            ],
            "nullable": true
          }
        }
      },
      "ord.TxInscriptions": {
        "type": "object",
        "required": [
          "inscriptions",
          "txid"
        ],
        "properties": {
          "inscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ord.TxInscription"
            }
          },
          "txid": {
            "type": "string"
          }
        }
      }
    }
  }
}